<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;netcoreapp2.1;netcoreapp3.1;net5.0</TargetFrameworks>
    <VersionPrefix>3.0.0</VersionPrefix>
    <VersionSuffix>local-$([System.DateTime]::UtcNow.ToString('yyyyMMddHHmm'))</VersionSuffix>
    <AssemblyName>Couchbase.NetClient</AssemblyName>
    <PackageId>CouchbaseNetClient</PackageId>
    <Product>CouchbaseNetClient</Product>
    <Description>The Official Couchbase .NET SDK.</Description>

    <PackageReleaseNotes>https://docs.couchbase.com/dotnet-sdk/current/project-docs/sdk-release-notes.html</PackageReleaseNotes>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

    <RootNamespace>Couchbase</RootNamespace>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);CS1591</NoWarn> <!-- suppress warnings for missing XML comments on public members -->

    <!-- This will cause .NET 5+ targets to fail to build (with .NET 6 SDK) if we violate trimming principles
         around RequiresUnreferencedCode attributes unless we suppress using UnconditionalSuppressMessage.
         We can leave this in place until we fully support trimming, after which we switch to
         IsTrimmable which marks the output assembly as trimmable.
         https://docs.microsoft.com/en-us/dotnet/core/deploying/trimming/prepare-libraries-for-trimming#enable-library-trim-warnings -->
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <DefineConstants>$(DefineConstants);RELEASE</DefineConstants>
    <DebugSymbols>false</DebugSymbols>
    <DebugType>portable</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SignAssembly)'=='true'">
    <DefineConstants>$(DefineConstants);SIGNING</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != 'netstandard2.0'">
    <DefineConstants>$(DefineConstants);SPAN_SUPPORT</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Core\Retry\Analytics\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="App.Metrics" />
    <PackageReference Include="App.Metrics.Abstractions" />
    <PackageReference Include="DnsClient" />
    <PackageReference Include="Microsoft.CSharp" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    <PackageReference Include="Microsoft.Extensions.ObjectPool" />
    <PackageReference Include="Newtonsoft.Json" />
    <PackageReference Include="System.IO.Pipelines" />
    <PackageReference Include="System.Linq.Async" />
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" />
    <PackageReference Include="System.Threading.Channels" />
    <PackageReference Include="System.Threading.Tasks.Dataflow" />
    <PackageReference Include="System.Diagnostics.DiagnosticSource" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="System.Memory" />
  </ItemGroup>

  <!-- Don't add System.Text.Json when targeting netcoreapp2.1, it is unsupported starting with 6.0.0.
       It is supported on netstandard2.0, but we exclude that as well because it is an antipattern to
       include API surface in the netstandard2.0 target that is not also available in netcoreapp2.1. -->
  <ItemGroup Condition=" '$(TargetFramework)' != 'netstandard2.0' And '$(TargetFramework)' != 'netcoreapp2.1' ">
    <PackageReference Include="System.Text.Json" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' Or '$(TargetFramework)' == 'netcoreapp2.1' ">
    <Compile Remove="Core\IO\Serializers\SystemTextJson\**\*.cs" />
    <None Include="Core\IO\Serializers\SystemTextJson\**\*.cs" />
  </ItemGroup>

</Project>
